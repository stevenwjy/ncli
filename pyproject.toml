[tool.poetry]
name = "ncli"
version = "0.1.0"
description = "CLI for exporting and synthesizing notes into Git-trackable files."
authors = ["Steven Wijaya <stevenwjy149@gmail.com>"]
license = "MIT OR AGPL-3.0"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
audible = "^0.10.0"
beautifulsoup4 = "^4.12.3"
chardet = "^5.2.0"
click = "^8.1.7"
httpx = "^0.27.2"
pandas = "^2.2.3"
pydantic = "^2.9.2"
requests = "^2.31.0"
toml = "^0.10.2"
youtube_transcript_api = "^0.6.2"
pyyaml = "^6.0"
python-dotenv = "^1.0.1"
pytubefix = "^8.3.0"
ffmpeg-python = "^0.2.0"
litellm = "^1.52.14"
pillow-heif = "^0.20.0"

[tool.poetry.scripts]
ncli = 'ncli.main:main'

[tool.poetry.group.dev.dependencies]
ruff = "^0.7.2"
pytest = "^8.3.3"

[tool.ruff]
line-length = 120        # TODO: Reduce to 80?
target-version = "py311"

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors (essential)
  "F",   # Pyflakes (essential, finds valid Python errors)
  "B",   # flake8-bugbear (catches bug-like code patterns)
  "I",   # isort (import sorting, very useful)
  "PL",  # Pylint (catches many common issues)
  "N",   # pep8-naming (consistent naming conventions)
  "UP",  # pyupgrade (modernize Python code)
  "RUF", # Ruff-specific rules (best practices)
  "S",   # flake8-bandit (security checks)
  "W",   # pycodestyle warnings
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["ncli", "tests"]
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
